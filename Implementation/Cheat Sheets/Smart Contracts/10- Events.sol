pragma solidity ^0.5.12;

contract EventTemplate {
    uint256 public studentsCount;
    mapping(uint => Student) public students;
    
    event StudentAdded(
        string firstName,
        string lastName,
        uint256 id
    );
    
    struct Student {
        string firstName;
        string lastName;
        uint256 id;
    }
         
    function getStudentFirstName(uint index) public view returns(string memory){
        return students[index].firstName;
    }
    
    function getStudentLastName(uint index) public view returns(string memory){
        return students[index].lastName;
    }
    
    function addStudent(string memory firstName, string memory lastName, uint256 id) public {
        studentsCount += 1;
        students[id] = Student(firstName, lastName, id);
        // We expect to see this student info in log section of this transaction
        // Events are emitted using `emit`, followed by
        // the name of the event and the arguments
        // (if any) in parentheses. Any such invocation
        // (even deeply nested) can be detected from
        // the JavaScript API by filtering for `StudentAdded`.
        emit StudentAdded(firstName, lastName, id);
    }
}


/// Template: Watch for events in web3js (https://solidity.readthedocs.io/en/v0.4.21/contracts.html#events):
/// var abi = /* abi as generated by the compiler */;
/// var ClientReceipt = web3.eth.contract(abi);
/// var clientReceipt = ClientReceipt.at("0x1234...ab67" /* address */);

/// var event = clientReceipt.Deposit();

/// // watch for changes
/// event.watch(function(error, result){
///     // result will contain various information
///     // including the argumets given to the `Deposit`
///     // call.
///     if (!error)
///         console.log(result);
/// });

/// // Or pass a callback to start watching immediately
/// var event = clientReceipt.Deposit(function(error, result) {
///     if (!error)
///         console.log(result);
/// });